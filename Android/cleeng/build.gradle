apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 2
        versionName "0.1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "publishing"
    productFlavors {
        publish {
            dimension "publishing"
        }
        dev {
            dimension "publishing"
        }
    }
}

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        credentials {
            username System.getenv("MAVEN_USERNAME")
            password System.getenv("MAVEN_PASSWORD")

        }
        url 'https://dl.bintray.com/applicaster-ltd/maven'
    }
    maven {
        url "https://dl.bintray.com/applicaster-ltd/maven_plugins/"

    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Cam framework
    def camPath = 'com.applicaster:applicaster-cam-framework:1.0.7'
    def devCAM = findProject(':cam')
    if (devCAM != null) {
        devImplementation project(':cam')
        publishApi(camPath)
    } else {
        publishApi(camPath)
    }

    // Applicaster SDK
    def applicasterSDKPath = 'com.applicaster:applicaster-android-sdk:4.0.0'
    // Check if an open SDK is defined - if not use the closed one.
    def devSDK = findProject(':applicaster-android-sdk')
    if (devSDK != null) {
        devImplementation project(':applicaster-android-sdk')
        publishApi(applicasterSDKPath)
    } else {
        publishApi(applicasterSDKPath)
    }

    implementation('com.github.LiquidPlayer:LiquidCore:0.6.2') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    def support_version = '28.0.0'
    implementation "com.android.support:appcompat-v7:$support_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

//---------------------------------- Bintray ----------------------------------//
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.jetbrains.dokka-android'

buildscript {
    repositories {
        jcenter()
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.17"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--match', 'android-*', '--abbrev=0', '--tags'
            standardOutput = stdout
        }
        def tag = stdout.toString().trim()
        String[] arr = tag.split('-')
        if (arr.length > 1) {
            return arr[1]
        }
        return arr[0]
    }
    catch (ignored) {
        println 'catch'
        return null
    }
}

def compareVersions = { versionFromTag, versionFromProps ->
    return versionFromTag == versionFromProps
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId GROUP

            def versionFromTag = getVersionName()
            if (versionFromTag != null) {
                // Check if version from tag equals to version from properties
                if (!compareVersions(versionFromTag, VERSION))
                    throw new Exception("Incomparable version value from tag and properties!")

                // There is a tag existing on the current commit - we can upload to Bintray
                version versionFromTag

                artifactId ARTIFACT_ID
                artifact("build/outputs/aar/${project.getName()}-release.aar") {
                    builtBy assemble
                }
                artifact androidJavadocsJar
                artifact androidSourcesJar
                pom.withXml {
                    Node root = asNode()
                    root.appendNode('name', ARTIFACT_ID)
                    root.appendNode('description', POM_DESCRIPTION)
                    root.appendNode('url', POM_URL)

                    def issues = root.appendNode('issueManagement')
                    issues.appendNode('system', 'github')
                    issues.appendNode('url', ISSUE_URL)

                    def scm = root.appendNode('scm')
                    scm.appendNode('url', POM_SCM_URL)
                    scm.appendNode('connection', POM_SCM_CONNECTION)
                    scm.appendNode('developerConnection', POM_SCM_DEV_CONNECTION)

                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', POM_LICENCE_NAME)
                    license.appendNode('url', POM_LICENCE_URL)
                    license.appendNode('distribution', POM_LICENCE_DIST)

                    def developer = root.appendNode('developers').appendNode('developer')
                    developer.appendNode('id', POM_DEVELOPER_ID)
                    developer.appendNode('name', POM_DEVELOPER_NAME)
                    developer.appendNode('email', POM_DEVELOPER_EMAIL)

                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.api.allDependencies.each {
                        if (!it.name.contains('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                    configurations.publishApi.allDependencies.each {
                        if (!it.name.contains('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                    configurations.implementation.allDependencies.each {
                        if (!it.name.contains('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                    configurations.publishImplementation.allDependencies.each {
                        if (!it.name.contains('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

static def getBintrayUserProperty() {
    return System.getenv("BINTRAY_USER")
}

static def getBintrayApiKeyProperty() {
    return System.getenv("BINTRAY_API_KEY")
}

bintray {
    user = bintrayUserProperty
    key = bintrayApiKeyProperty
    publications = ['mavenJava']

    dryRun = false
    publish = true
    override = true
    pkg {
        repo = 'maven_plugins'
        name = ARTIFACT_ID
        userOrg = 'applicaster-ltd'
        websiteUrl = POM_URL
        issueTrackerUrl = ISSUE_URL
        vcsUrl = POM_SCM_URL
        licenses = ['Apache-2.0']
        labels = ['aar', 'android']
        version {
            name = getVersionName()
            vcsTag = 'v' + getVersionName()
        }
    }
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    reportUndocumented = false
}

task androidJavadocsJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task androidJar(type: Jar) {
    from 'build/intermediates/classes/release'
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
    archives androidJar
}
kotlin {
    experimental {
        coroutines "enable"
    }
}